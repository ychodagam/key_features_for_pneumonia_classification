# -*- coding: utf-8 -*-
"""io.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14bOGvwYBglVBeYLhhCGrlWXH0QwrRwMV
"""

"""
Module: io
Provides functions to process images from directories and save feature reports to CSV.
"""

import os
import glob
import cv2
import pandas as pd
from tqdm import tqdm
from .features import compute_wavelet_features


def process_images_from_folder(folder_path, wavelet, quant_binWidth=25, file_extensions=None):
    """
    Process images in a folder, extract features using the specified wavelet, and return a DataFrame.

    Parameters:
        folder_path (str): Path to folder containing images.
        wavelet (pywt.Wavelet): Wavelet to use.
        quant_binWidth (int): Bin width for discretization.
        file_extensions (list): List of file extensions (default ['.jpg', '.jpeg', '.png']).

    Returns:
        pd.DataFrame: DataFrame with extracted features and filenames.

    Raises:
        Exception: If processing fails.
    """
    if file_extensions is None:
        file_extensions = ['.jpg', '.jpeg', '.png']
    rows = []
    image_files = []
    for ext in file_extensions:
        image_files.extend(glob.glob(os.path.join(folder_path, f'*{ext}')))
        image_files.extend(glob.glob(os.path.join(folder_path, f'*{ext.upper()}')))
    for file in tqdm(image_files, desc=f"Processing {os.path.basename(folder_path)}"):
        try:
            img = cv2.imread(file, cv2.IMREAD_GRAYSCALE)
            if img is None:
                continue
            img = img.astype(float) / 255.0
            feats = compute_wavelet_features(img, wavelet, quant_binWidth=quant_binWidth)
            feats['filename'] = os.path.basename(file)
            rows.append(feats)
        except Exception as e:
            print(f"Error processing file {file}: {e}")
    return pd.DataFrame(rows)

def save_features_to_csv(df, output_csv):
    """
    Save a DataFrame to CSV.

    Parameters:
        df (pd.DataFrame): DataFrame to save.
        output_csv (str): Output CSV file path.

    Raises:
        Exception: If saving fails.
    """
    try:
        df.to_csv(output_csv, index=False)
        print(f"Saved {len(df)} records to {output_csv}")
    except Exception as e:
        print(f"Error saving CSV {output_csv}: {e}")
        raise
